var tipuesearch = {"pages":[{"text":"navier A 2D and 3D Computational Fluid Dynamics (CFD) solver. Developer Info Vincent San Miguel","tags":"home","loc":"index.html","title":" navier "},{"text":"Procedures Procedure Location Procedure Type Description ppe solver Subroutine Solves the pressure-Poisson equation:\n  p_{i,j}&#94;n = \\frac{\\left(p_{i+1,j}&#94;n + p_{i-1,j}&#94;n \\right) \\Delta y&#94;2 +\n \\left( p_{i,j+1}&#94;n + p_{i,j-1}&#94;n \\right) \\Delta x&#94;2}{2 \\left(\\Delta x&#94;2 + \\Delta y&#94;2 \\right)}\n - b \n where\n  b = \\frac{1}{\\Delta t} \\left( \\frac{u_{i+1,j} - u_{i-1,j}}{2\\Delta x} +\n \\frac{v_{i,j+1} - v_{i,j-1}}{2\\Delta y} \\right) - \\left(\\frac{u_{i+1,j} - u_{i-1,j}}{2\\Delta x} \\right)&#94;2 - 2 \\frac{u_{i,j+1}-u_{i,j-1}}{2\\Delta y} \\frac{v_{i+1,j}-v_{i-1,j}}{2\\Delta x} - \\left(\\frac{v_{i,j+1}-v_{i,j-1}}{2\\Delta y}\\right)&#94;2 ","tags":"list procedures","loc":"lists/procedures.html","title":"\nAll Procedures – navier\n"},{"text":"Source Files File Description precision.f90 solver.f90","tags":"list files","loc":"lists/files.html","title":"\nAll Files – navier\n"},{"text":"Modules Module Source File Description precision precision.f90 Provides kind attributes for setting machine-compiler-independent precision for real numbers. Here, we define \"single precision\" to mean 32-bit precision, \"double precision\" to mean 64-bit precision, and \"quadruple precision\" to mean 128-bit precision. This ensures that precision is preserved regardless of the compiler or computer architecture. solver solver.f90 Contains the discretized 2D Navier-Stokes solver. The x-momentum equation is given by:\n  \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + v \\frac{\\partial u}{\\partial y} = -\\frac{1}{\\rho} \\frac{\\partial p}{\\partial x} + \\nu \\left( \\frac{\\partial&#94;2 u}{\\partial x&#94;2} + \\frac{\\partial&#94;2 u}{\\partial y&#94;2} \\right) \n The y-momentum equation is similarly given by:\n  \\frac{\\partial v}{\\partial t} + u \\frac{\\partial v}{\\partial x} + v \\frac{\\partial v}{\\partial y} = -\\frac{1}{\\rho} \\frac{\\partial p}{\\partial y} + \\nu \\left( \\frac{\\partial&#94;2 v}{\\partial x&#94;2} + \\frac{\\partial&#94;2 v}{\\partial y&#94;2} \\right) \n Finally, the pressure equation is given by:\n  \\frac{\\partial&#94;2 p}{\\partial x&#94;2} + \\frac{\\partial&#94;2 p}{\\partial y&#94;2} = -\\rho \\left( \\frac{\\partial u}{\\partial x} \\frac{\\partial u}{\\partial x} + 2 \\frac{\\partial u}{\\partial y} \\frac{\\partial v}{\\partial x} + \\frac{\\partial v}{\\partial y} \\frac{\\partial v}{\\partial y} \\right) ","tags":"list modules","loc":"lists/modules.html","title":"\nAll Modules – navier\n"},{"text":"solver.f90 Source File Source File solver.f90 Modules solver All Source Files precision.f90 solver.f90 module solver !! Contains the discretized 2D Navier-Stokes solver. The x-momentum equation is given by: !!  \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + v \\frac{\\partial u}{\\partial y} = -\\frac{1}{\\rho} \\frac{\\partial p}{\\partial x} + \\nu \\left( \\frac{\\partial&#94;2 u}{\\partial x&#94;2} + \\frac{\\partial&#94;2 u}{\\partial y&#94;2} \\right)  !! The y-momentum equation is similarly given by: !!  \\frac{\\partial v}{\\partial t} + u \\frac{\\partial v}{\\partial x} + v \\frac{\\partial v}{\\partial y} = -\\frac{1}{\\rho} \\frac{\\partial p}{\\partial y} + \\nu \\left( \\frac{\\partial&#94;2 v}{\\partial x&#94;2} + \\frac{\\partial&#94;2 v}{\\partial y&#94;2} \\right)  !! Finally, the pressure equation is given by: !!  \\frac{\\partial&#94;2 p}{\\partial x&#94;2} + \\frac{\\partial&#94;2 p}{\\partial y&#94;2} = -\\rho \\left( \\frac{\\partial u}{\\partial x} \\frac{\\partial u}{\\partial x} + 2 \\frac{\\partial u}{\\partial y} \\frac{\\partial v}{\\partial x} + \\frac{\\partial v}{\\partial y} \\frac{\\partial v}{\\partial y} \\right)  use precision private :: ppb contains pure real ( kind = kd ) function ppb ( rho , dt , u , v , dx , dy ) result ( b ) !! Solves a portion of the pressure-Poisson equation: !!  b = \\left[ \\frac{1}{\\Delta t} \\left( \\frac{u_{i+1,j} - u_{i-1,j}}{2\\Delta x} + !! \\frac{v_{i,j+1} - v_{i,j-1}}{2\\Delta y} \\right) \\right]  real ( kind = kd ), intent ( in ) :: rho , dt , dx , dy real ( kind = kd ), dimension ( - 1 : 1 , - 1 : 1 ), intent ( in ) :: u , v b = ( ( rho * dx ** 2 * dy ** 2 ) / ( 2 * ( dx ** 2 + dy ** 2 )) ) & * 1 / dt * ( ( u ( 1 , 0 ) - u ( - 1 , 0 )) / ( 2 * dx ) + ( v ( 0 , 1 ) - v ( 0 , - 1 )) / ( 2 * dy ) ) & - ( ( u ( 1 , 0 ) - u ( - 1 , 0 )) / ( 2 * dx ) ) ** 2 & - ( - 2 * (( u ( 0 , 1 ) - u ( 0 , - 1 )) / ( 2 * dy )) * (( v ( 1 , 0 ) - v ( - 1 , 0 )) / ( 2 * dx )) ) & - ( ( v ( 0 , 1 ) - v ( 0 , - 1 )) / ( 2 * dy ) ) ** 2 end function ppb subroutine ppe ( p , rho , dt , u , v , dx , dy ) !! Solves the pressure-Poisson equation: !!  p_{i,j}&#94;n = \\frac{\\left(p_{i+1,j}&#94;n + p_{i-1,j}&#94;n \\right) \\Delta y&#94;2 + !! \\left( p_{i,j+1}&#94;n + p_{i,j-1}&#94;n \\right) \\Delta x&#94;2}{2 \\left(\\Delta x&#94;2 + \\Delta y&#94;2 \\right)} !! - b  !! where !!  b = \\frac{1}{\\Delta t} \\left( \\frac{u_{i+1,j} - u_{i-1,j}}{2\\Delta x} + !! \\frac{v_{i,j+1} - v_{i,j-1}}{2\\Delta y} \\right) - \\left(\\frac{u_{i+1,j} - u_{i-1,j}}{2\\Delta x} \\right)&#94;2 - 2 \\frac{u_{i,j+1}-u_{i,j-1}}{2\\Delta y} \\frac{v_{i+1,j}-v_{i-1,j}}{2\\Delta x} - \\left(\\frac{v_{i,j+1}-v_{i,j-1}}{2\\Delta y}\\right)&#94;2  real ( kind = kd ), intent ( in ) :: rho , dt , dx , dy real ( kind = kd ), dimension ( - 1 : 1 , - 1 : 1 ), intent ( in ) :: u , v real ( kind = kd ), dimension ( - 1 : 1 , - 1 : 1 ), intent ( in out ) :: p real ( kind = kd ) :: b b = ppb ( rho , dt , u , v , dx , dy ) p ( 0 , 0 ) = ( ( p ( 1 , 0 ) + p ( - 1 , 0 )) * dy ** 2 + ( p ( 0 , 1 ) + p ( 0 , - 1 )) * dx ** 2 ) & / ( 2 * ( dx ** 2 + dy ** 2 )) & - b end subroutine ppe end module solver © 2015 navier was written by Vincent San Miguel. Documentation generated by FORD .","tags":"","loc":"sourcefile/solver.f90.html","title":"solver.f90 – navier"},{"text":"precision.f90 Source File Source File precision.f90 Modules precision All Source Files precision.f90 solver.f90 module precision !! Provides kind attributes for setting machine-compiler-independent precision for real numbers. Here, we define \"single precision\" to mean 32-bit precision, \"double precision\" to mean 64-bit precision, and \"quadruple precision\" to mean 128-bit precision. This ensures that precision is preserved regardless of the compiler or computer architecture. implicit none integer , parameter :: sp = selected_real_kind ( 6 , 37 ) !! Single precision: 32-bit real integer , parameter :: dp = selected_real_kind ( 15 , 307 ) !! Double precision: 64-bit real integer , parameter :: qp = selected_real_kind ( 33 , 4931 ) !! Quadruple precision: 128-bit real integer , parameter :: kd = dp !! The precision of real types used in this program contains end module precision © 2015 navier was written by Vincent San Miguel. Documentation generated by FORD .","tags":"","loc":"sourcefile/precision.f90.html","title":"precision.f90 – navier"},{"text":"ppe Subroutine Source File solver.f90 solver ppe Variables b All Procedures ppe public  subroutine ppe(p, rho, dt, u, v, dx, dy) Arguments Type Intent Optional Attributes Name real(kind=kd), intent(inout), dimension(-1:1,-1:1) :: p real(kind=kd), intent(in) :: rho real(kind=kd), intent(in) :: dt real(kind=kd), intent(in), dimension(-1:1,-1:1) :: u real(kind=kd), intent(in), dimension(-1:1,-1:1) :: v real(kind=kd), intent(in) :: dx real(kind=kd), intent(in) :: dy Description Solves the pressure-Poisson equation:\n  p_{i,j}&#94;n = \\frac{\\left(p_{i+1,j}&#94;n + p_{i-1,j}&#94;n \\right) \\Delta y&#94;2 +\n \\left( p_{i,j+1}&#94;n + p_{i,j-1}&#94;n \\right) \\Delta x&#94;2}{2 \\left(\\Delta x&#94;2 + \\Delta y&#94;2 \\right)}\n - b \n where\n  b = \\frac{1}{\\Delta t} \\left( \\frac{u_{i+1,j} - u_{i-1,j}}{2\\Delta x} +\n \\frac{v_{i,j+1} - v_{i,j-1}}{2\\Delta y} \\right) - \\left(\\frac{u_{i+1,j} - u_{i-1,j}}{2\\Delta x} \\right)&#94;2 - 2 \\frac{u_{i,j+1}-u_{i,j-1}}{2\\Delta y} \\frac{v_{i+1,j}-v_{i-1,j}}{2\\Delta x} - \\left(\\frac{v_{i,j+1}-v_{i,j-1}}{2\\Delta y}\\right)&#94;2  Variables Type Visibility Attributes Name Initial real(kind=kd), public :: b © 2015 navier was written by Vincent San Miguel. Documentation generated by FORD .","tags":"","loc":"proc/ppe.html","title":"ppe – navier"},{"text":"solver Module Source File solver.f90 solver Subroutines ppe All Modules precision solver Uses: precision Contains the discretized 2D Navier-Stokes solver. The x-momentum equation is given by:\n  \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + v \\frac{\\partial u}{\\partial y} = -\\frac{1}{\\rho} \\frac{\\partial p}{\\partial x} + \\nu \\left( \\frac{\\partial&#94;2 u}{\\partial x&#94;2} + \\frac{\\partial&#94;2 u}{\\partial y&#94;2} \\right) \n The y-momentum equation is similarly given by:\n  \\frac{\\partial v}{\\partial t} + u \\frac{\\partial v}{\\partial x} + v \\frac{\\partial v}{\\partial y} = -\\frac{1}{\\rho} \\frac{\\partial p}{\\partial y} + \\nu \\left( \\frac{\\partial&#94;2 v}{\\partial x&#94;2} + \\frac{\\partial&#94;2 v}{\\partial y&#94;2} \\right) \n Finally, the pressure equation is given by:\n  \\frac{\\partial&#94;2 p}{\\partial x&#94;2} + \\frac{\\partial&#94;2 p}{\\partial y&#94;2} = -\\rho \\left( \\frac{\\partial u}{\\partial x} \\frac{\\partial u}{\\partial x} + 2 \\frac{\\partial u}{\\partial y} \\frac{\\partial v}{\\partial x} + \\frac{\\partial v}{\\partial y} \\frac{\\partial v}{\\partial y} \\right)  Subroutines public  subroutine ppe (p, rho, dt, u, v, dx, dy) Arguments Type Intent Optional Attributes Name real(kind=kd), intent(inout), dimension(-1:1,-1:1) :: p real(kind=kd), intent(in) :: rho real(kind=kd), intent(in) :: dt real(kind=kd), intent(in), dimension(-1:1,-1:1) :: u real(kind=kd), intent(in), dimension(-1:1,-1:1) :: v real(kind=kd), intent(in) :: dx real(kind=kd), intent(in) :: dy Description Solves the pressure-Poisson equation:\n  p_{i,j}&#94;n = \\frac{\\left(p_{i+1,j}&#94;n + p_{i-1,j}&#94;n \\right) \\Delta y&#94;2 +\n \\left( p_{i,j+1}&#94;n + p_{i,j-1}&#94;n \\right) \\Delta x&#94;2}{2 \\left(\\Delta x&#94;2 + \\Delta y&#94;2 \\right)}\n - b \n where\n  b = \\frac{1}{\\Delta t} \\left( \\frac{u_{i+1,j} - u_{i-1,j}}{2\\Delta x} +\n \\frac{v_{i,j+1} - v_{i,j-1}}{2\\Delta y} \\right) - \\left(\\frac{u_{i+1,j} - u_{i-1,j}}{2\\Delta x} \\right)&#94;2 - 2 \\frac{u_{i,j+1}-u_{i,j-1}}{2\\Delta y} \\frac{v_{i+1,j}-v_{i-1,j}}{2\\Delta x} - \\left(\\frac{v_{i,j+1}-v_{i,j-1}}{2\\Delta y}\\right)&#94;2  © 2015 navier was written by Vincent San Miguel. Documentation generated by FORD .","tags":"","loc":"module/solver.html","title":"solver – navier"},{"text":"precision Module Source File precision.f90 precision Variables sp dp qp kd All Modules precision solver Provides kind attributes for setting machine-compiler-independent precision for real numbers. Here, we define \"single precision\" to mean 32-bit precision, \"double precision\" to mean 64-bit precision, and \"quadruple precision\" to mean 128-bit precision. This ensures that precision is preserved regardless of the compiler or computer architecture. Variables Type Visibility Attributes Name Initial integer, public, parameter :: sp = selected_real_kind(6,37) Single precision: 32-bit real integer, public, parameter :: dp = selected_real_kind(15,307) Double precision: 64-bit real integer, public, parameter :: qp = selected_real_kind(33,4931) Quadruple precision: 128-bit real integer, public, parameter :: kd = dp The precision of real types used in this program © 2015 navier was written by Vincent San Miguel. Documentation generated by FORD .","tags":"","loc":"module/precision.html","title":"precision – navier"}]}