var tipuesearch = {"pages":[{"text":"navier A 2D and 3D Computational Fluid Dynamics (CFD) solver. Developer Info Vincent San Miguel","tags":"home","loc":"index.html","title":" navier "},{"text":"Procedures Procedure Location Procedure Type Description cavityFlow solver Subroutine","tags":"list procedures","loc":"lists/procedures.html","title":"\nAll Procedures – navier\n"},{"text":"Source Files File Description main.f90 precision.f90 solver.f90","tags":"list files","loc":"lists/files.html","title":"\nAll Files – navier\n"},{"text":"Modules Module Source File Description precision precision.f90 Provides kind attributes for setting machine-compiler-independent precision for real numbers. Here, we define \"single precision\" to mean 32-bit precision, \"double precision\" to mean 64-bit precision, and \"quadruple precision\" to mean 128-bit precision. This ensures that precision is preserved regardless of the compiler or computer architecture. solver solver.f90 Contains the discretized 2D Navier-Stokes solver. The x-momentum equation is given by:\n  \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + v \\frac{\\partial u}{\\partial y} = -\\frac{1}{\\rho} \\frac{\\partial p}{\\partial x} + \\nu \\left( \\frac{\\partial&#94;2 u}{\\partial x&#94;2} + \\frac{\\partial&#94;2 u}{\\partial y&#94;2} \\right) \n The y-momentum equation is similarly given by:\n  \\frac{\\partial v}{\\partial t} + u \\frac{\\partial v}{\\partial x} + v \\frac{\\partial v}{\\partial y} = -\\frac{1}{\\rho} \\frac{\\partial p}{\\partial y} + \\nu \\left( \\frac{\\partial&#94;2 v}{\\partial x&#94;2} + \\frac{\\partial&#94;2 v}{\\partial y&#94;2} \\right) \n Finally, the pressure equation is given by:\n  \\frac{\\partial&#94;2 p}{\\partial x&#94;2} + \\frac{\\partial&#94;2 p}{\\partial y&#94;2} = -\\rho \\left( \\frac{\\partial u}{\\partial x} \\frac{\\partial u}{\\partial x} + 2 \\frac{\\partial u}{\\partial y} \\frac{\\partial v}{\\partial x} + \\frac{\\partial v}{\\partial y} \\frac{\\partial v}{\\partial y} \\right) ","tags":"list modules","loc":"lists/modules.html","title":"\nAll Modules – navier\n"},{"text":"solver.f90 Source File Source File solver.f90 Modules solver All Source Files main.f90 precision.f90 solver.f90 module solver !! Contains the discretized 2D Navier-Stokes solver. The x-momentum equation is given by: !!  \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + v \\frac{\\partial u}{\\partial y} = -\\frac{1}{\\rho} \\frac{\\partial p}{\\partial x} + \\nu \\left( \\frac{\\partial&#94;2 u}{\\partial x&#94;2} + \\frac{\\partial&#94;2 u}{\\partial y&#94;2} \\right)  !! The y-momentum equation is similarly given by: !!  \\frac{\\partial v}{\\partial t} + u \\frac{\\partial v}{\\partial x} + v \\frac{\\partial v}{\\partial y} = -\\frac{1}{\\rho} \\frac{\\partial p}{\\partial y} + \\nu \\left( \\frac{\\partial&#94;2 v}{\\partial x&#94;2} + \\frac{\\partial&#94;2 v}{\\partial y&#94;2} \\right)  !! Finally, the pressure equation is given by: !!  \\frac{\\partial&#94;2 p}{\\partial x&#94;2} + \\frac{\\partial&#94;2 p}{\\partial y&#94;2} = -\\rho \\left( \\frac{\\partial u}{\\partial x} \\frac{\\partial u}{\\partial x} + 2 \\frac{\\partial u}{\\partial y} \\frac{\\partial v}{\\partial x} + \\frac{\\partial v}{\\partial y} \\frac{\\partial v}{\\partial y} \\right)  use precision public :: cavityFlow private :: ppe , ppb contains subroutine cavityFlow ( nt , nit , u , v , dt , dx , dy , p , rho , nu ) real ( kind = kd ), dimension (:,:), intent ( in out ) :: u , v , p real ( kind = kd ), intent ( in ) :: dt , dx , dy , rho , nu integer , intent ( in ) :: nt real ( kind = kd ), dimension (:,:), allocatable :: un , vn integer :: i , nx , ny , mx , my if ( allocated ( un )) deallocate ( un ) if ( allocated ( vn )) deallocate ( vn ) nx = size ( u , 1 ) ny = size ( u , 2 ) allocate ( un ( nx , ny )) allocate ( vn ( nx , ny )) mx = nx - 1 my = ny - 1 do i = 1 , nt un (:,:) = u (:,:) vn (:,:) = v (:,:) p (:,:) = ppe ( p , rho , dt , u , v , nx , ny , dx , dy , nit ) u ( 2 : mx , 2 : my ) = un ( 2 : mx , 2 : my ) - & un ( 2 : mx , 2 : my ) * dt / dx * ( un ( 2 : mx , 2 : my ) - un ( 2 : mx , 1 : my - 1 )) - & vn ( 2 : mx , 2 : my ) * dt / dy * ( un ( 2 : mx , 2 : my ) - un ( 1 : mx - 1 , 2 : my )) - & dt / ( 2 * rho * dx ) * ( p ( 2 : mx , 3 :) - p ( 2 : mx , 1 : my - 1 )) + & nu * ( dt / dx ** 2 * ( un ( 2 : mx , 3 :) - 2 * un ( 2 : mx , 2 : my ) + un ( 2 : mx , 1 : my - 1 )) + & dt / dy ** 2 * ( un ( 3 :, 2 : my ) - 2 * un ( 2 : mx , 2 : my ) + un ( 1 : mx - 1 , 2 : my ))) v ( 2 : mx , 2 : my ) = vn ( 2 : mx , 2 : my ) - & un ( 2 : mx , 2 : my ) * dt / dx * ( vn ( 2 : mx , 2 : my ) - vn ( 2 : mx , 1 : my - 1 )) - & vn ( 2 : mx , 2 : my ) * dt / dy * ( vn ( 2 : mx , 2 : my ) - vn ( 1 : mx - 1 , 2 : my )) - & dt / ( 2 * rho * dy ) * ( p ( 3 :, 2 : my ) - p ( 1 : mx - 1 , 2 : my )) + & nu * ( dt / dx ** 2 * ( vn ( 2 : mx , 3 :) - 2 * vn ( 2 : mx , 2 : my ) + vn ( 2 : mx , 1 : my - 1 )) + & ( dt / dy ** 2 * ( vn ( 3 :, 2 : my ) - 2 * vn ( 2 : mx , 2 : my ) + vn ( 1 : mx - 1 , 2 : my )))) u ( 1 ,:) = 0 ; v ( 1 ,:) = 0 u (:, 1 ) = 1 ; v (:, 1 ) = 0 u (:, ny ) = 0 ; v (:, ny ) = 0 u ( nx ,:) = 0 ; v ( nx ,:) = 0 end do end subroutine cavityFlow function ppb ( rho , dt , u , v , nx , ny , dx , dy ) !! Solves a portion of the pressure-Poisson equation: !!  b = \\left[ \\frac{1}{\\Delta t} \\left( \\frac{u_{i+1,j} - u_{i-1,j}}{2\\Delta x} + !! \\frac{v_{i,j+1} - v_{i,j-1}}{2\\Delta y} \\right) \\right]  integer , intent ( in ) :: nx , ny real ( kind = kd ), intent ( in ) :: rho , dt , dx , dy real ( kind = kd ), dimension (:,:), intent ( in ) :: u , v real ( kind = kd ), dimension ( 1 : nx , 1 : ny ) :: ppb integer :: mx , my mx = nx - 1 my = ny - 1 ppb ( 2 : mx , 2 : my ) = rho * ( 1 / dt * (( u ( 2 : mx , 3 :) - u ( 2 : mx , 1 : my - 1 )) / ( 2 * dx ) + ( v ( 3 :, 2 : my ) - v ( 1 : mx - 1 , 2 : my )) / ( 2 * dy )) - & (( u ( 2 : mx , 3 :) - u ( 2 : mx , 1 : my - 1 )) / ( 2 * dx )) ** 2 - & 2 * (( u ( 3 :, 2 : my ) - u ( 1 : mx - 1 , 2 : my )) / ( 2 * dy ) * ( v ( 2 : mx , 3 :) - v ( 2 : mx , 1 : my - 1 )) / ( 2 * dx )) - & (( v ( 3 :, 2 : my ) - v ( 1 : mx - 1 , 2 : my )) / ( 2 * dy )) ** 2 ) end function ppb function ppe ( p , rho , dt , u , v , nx , ny , dx , dy , nit ) !! Solves the pressure-Poisson equation: !!  p_{i,j}&#94;n = \\frac{\\left(p_{i+1,j}&#94;n + p_{i-1,j}&#94;n \\right) \\Delta y&#94;2 + !! \\left( p_{i,j+1}&#94;n + p_{i,j-1}&#94;n \\right) \\Delta x&#94;2}{2 \\left(\\Delta x&#94;2 + \\Delta y&#94;2 \\right)} !! - b  !! where !!  b = \\frac{1}{\\Delta t} \\left( \\frac{u_{i+1,j} - u_{i-1,j}}{2\\Delta x} + !! \\frac{v_{i,j+1} - v_{i,j-1}}{2\\Delta y} \\right) - \\left(\\frac{u_{i+1,j} - u_{i-1,j}}{2\\Delta x} \\right)&#94;2 - 2 \\frac{u_{i,j+1}-u_{i,j-1}}{2\\Delta y} \\frac{v_{i+1,j}-v_{i-1,j}}{2\\Delta x} - \\left(\\frac{v_{i,j+1}-v_{i,j-1}}{2\\Delta y}\\right)&#94;2  integer , intent ( in ) :: nx , ny , nit real ( kind = kd ), intent ( in ) :: rho , dt , dx , dy real ( kind = kd ), dimension (:,:), intent ( in ) :: u , v real ( kind = kd ), dimension (:,:) :: p integer :: mx , my real ( kind = kd ), dimension ( 1 : nx , 1 : ny ) :: b , pn , ppe mx = nx - 1 my = ny - 1 pn (:,:) = 0 b (:,:) = ppb ( rho , dt , u , v , nx , ny , dx , dy ) do i = 1 , nit pn (:,:) = p (:,:) p ( 2 : mx , 2 : my ) = (( pn ( 2 : mx , 3 :) + pn ( 2 : mx , 1 : my - 1 )) * dy ** 2 + ( pn ( 3 :, 2 : my ) + pn ( 1 : mx - 1 , 2 : my )) * dx ** 2 ) / & ( 2 * ( dx ** 2 + dy ** 2 )) - & dx ** 2 * dy ** 2 / ( 2 * ( dx ** 2 + dy ** 2 )) * b ( 2 : mx , 2 : my ) p ( nx ,:) = p ( mx ,:) p ( 1 ,:) = p ( 2 ,:) p (:, 1 ) = p (:, 2 ) p (:, ny ) = 0 end do ppe (:,:) = p (:,:) end function ppe end module solver © 2015 navier was written by Vincent San Miguel. Documentation generated by FORD .","tags":"","loc":"sourcefile/solver.f90.html","title":"solver.f90 – navier"},{"text":"precision.f90 Source File Source File precision.f90 Modules precision All Source Files main.f90 precision.f90 solver.f90 module precision !! Provides kind attributes for setting machine-compiler-independent precision for real numbers. Here, we define \"single precision\" to mean 32-bit precision, \"double precision\" to mean 64-bit precision, and \"quadruple precision\" to mean 128-bit precision. This ensures that precision is preserved regardless of the compiler or computer architecture. implicit none integer , parameter :: sp = selected_real_kind ( 6 , 37 ) !! Single precision: 32-bit real integer , parameter :: dp = selected_real_kind ( 15 , 307 ) !! Double precision: 64-bit real integer , parameter :: qp = selected_real_kind ( 33 , 4931 ) !! Quadruple precision: 128-bit real integer , parameter :: kd = dp !! The precision of real types used in this program contains end module precision © 2015 navier was written by Vincent San Miguel. Documentation generated by FORD .","tags":"","loc":"sourcefile/precision.f90.html","title":"precision.f90 – navier"},{"text":"main.f90 Source File Source File main.f90 Programs main All Source Files main.f90 precision.f90 solver.f90 program main use precision use solver implicit none real ( kind = kd ), dimension (:,:), allocatable :: u , v , p integer :: nt , nx , ny , nit real ( kind = kd ) :: c , dt , dx , dy , rho , nu real ( kind = kd ), dimension (:), allocatable :: x , y integer :: i nx = 41 ; ny = 41 nt = 1000 ; nit = 100 c = 1 dx = 2.0 / ( nx - 1 ) dy = 2.0 / ( ny - 1 ) allocate ( x ( nx )) allocate ( y ( ny )) x (:) = ( / ( i , i = 0 , 2 , nx ) / ) y (:) = ( / ( i , i = 0 , 2 , ny ) / ) rho = 1 nu = 0.1 dt = 0.001 allocate ( u ( nx , ny )) allocate ( v ( nx , ny )) allocate ( p ( nx , ny )) u (:,:) = 0 v (:,:) = 0 p (:,:) = 0 call cavityFlow ( nt , nit , u , v , dt , dx , dy , p , rho , nu ) end program main © 2015 navier was written by Vincent San Miguel. Documentation generated by FORD .","tags":"","loc":"sourcefile/main.f90.html","title":"main.f90 – navier"},{"text":"cavityFlow Subroutine Source File solver.f90 solver cavityFlow Variables un vn i nx ny mx my All Procedures cavityFlow public  subroutine cavityFlow(nt, nit, u, v, dt, dx, dy, p, rho, nu) Arguments Type Intent Optional Attributes Name integer, intent(in) :: nt integer, intent(inout) :: nit real(kind=kd), intent(inout), dimension(:,:) :: u real(kind=kd), intent(inout), dimension(:,:) :: v real(kind=kd), intent(in) :: dt real(kind=kd), intent(in) :: dx real(kind=kd), intent(in) :: dy real(kind=kd), intent(inout), dimension(:,:) :: p real(kind=kd), intent(in) :: rho real(kind=kd), intent(in) :: nu Variables Type Visibility Attributes Name Initial real(kind=kd), public, dimension(:,:), allocatable :: un real(kind=kd), public, dimension(:,:), allocatable :: vn integer, public :: i integer, public :: nx integer, public :: ny integer, public :: mx integer, public :: my © 2015 navier was written by Vincent San Miguel. Documentation generated by FORD .","tags":"","loc":"proc/cavityflow.html","title":"cavityFlow – navier"},{"text":"solver Module Source File solver.f90 solver Subroutines cavityFlow All Modules precision solver Uses: precision Contains the discretized 2D Navier-Stokes solver. The x-momentum equation is given by:\n  \\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} + v \\frac{\\partial u}{\\partial y} = -\\frac{1}{\\rho} \\frac{\\partial p}{\\partial x} + \\nu \\left( \\frac{\\partial&#94;2 u}{\\partial x&#94;2} + \\frac{\\partial&#94;2 u}{\\partial y&#94;2} \\right) \n The y-momentum equation is similarly given by:\n  \\frac{\\partial v}{\\partial t} + u \\frac{\\partial v}{\\partial x} + v \\frac{\\partial v}{\\partial y} = -\\frac{1}{\\rho} \\frac{\\partial p}{\\partial y} + \\nu \\left( \\frac{\\partial&#94;2 v}{\\partial x&#94;2} + \\frac{\\partial&#94;2 v}{\\partial y&#94;2} \\right) \n Finally, the pressure equation is given by:\n  \\frac{\\partial&#94;2 p}{\\partial x&#94;2} + \\frac{\\partial&#94;2 p}{\\partial y&#94;2} = -\\rho \\left( \\frac{\\partial u}{\\partial x} \\frac{\\partial u}{\\partial x} + 2 \\frac{\\partial u}{\\partial y} \\frac{\\partial v}{\\partial x} + \\frac{\\partial v}{\\partial y} \\frac{\\partial v}{\\partial y} \\right)  Subroutines public  subroutine cavityFlow (nt, nit, u, v, dt, dx, dy, p, rho, nu) Arguments Type Intent Optional Attributes Name integer, intent(in) :: nt integer, intent(inout) :: nit real(kind=kd), intent(inout), dimension(:,:) :: u real(kind=kd), intent(inout), dimension(:,:) :: v real(kind=kd), intent(in) :: dt real(kind=kd), intent(in) :: dx real(kind=kd), intent(in) :: dy real(kind=kd), intent(inout), dimension(:,:) :: p real(kind=kd), intent(in) :: rho real(kind=kd), intent(in) :: nu © 2015 navier was written by Vincent San Miguel. Documentation generated by FORD .","tags":"","loc":"module/solver.html","title":"solver – navier"},{"text":"precision Module Source File precision.f90 precision Variables sp dp qp kd All Modules precision solver Provides kind attributes for setting machine-compiler-independent precision for real numbers. Here, we define \"single precision\" to mean 32-bit precision, \"double precision\" to mean 64-bit precision, and \"quadruple precision\" to mean 128-bit precision. This ensures that precision is preserved regardless of the compiler or computer architecture. Variables Type Visibility Attributes Name Initial integer, public, parameter :: sp = selected_real_kind(6,37) Single precision: 32-bit real integer, public, parameter :: dp = selected_real_kind(15,307) Double precision: 64-bit real integer, public, parameter :: qp = selected_real_kind(33,4931) Quadruple precision: 128-bit real integer, public, parameter :: kd = dp The precision of real types used in this program © 2015 navier was written by Vincent San Miguel. Documentation generated by FORD .","tags":"","loc":"module/precision.html","title":"precision – navier"},{"text":"main Program Source File main.f90 main Variables u v p nt nx ny nit c dt dx dy rho nu x y i All Programs main Uses: precision solver Variables Type Attributes Name Initial real(kind=kd), dimension(:,:), allocatable :: u real(kind=kd), dimension(:,:), allocatable :: v real(kind=kd), dimension(:,:), allocatable :: p integer :: nt integer :: nx integer :: ny integer :: nit real(kind=kd) :: c real(kind=kd) :: dt real(kind=kd) :: dx real(kind=kd) :: dy real(kind=kd) :: rho real(kind=kd) :: nu real(kind=kd), dimension(:), allocatable :: x real(kind=kd), dimension(:), allocatable :: y integer :: i © 2015 navier was written by Vincent San Miguel. Documentation generated by FORD .","tags":"","loc":"program/main.html","title":"main – navier"}]}